{
	// Place your 1945 workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"component_c":{
		"prefix":["ccomp"],
		"body":["#include \"${TM_FILENAME_BASE}.h\"","#include \"managers.h\"","#include \"scene.h\"","#include <stdio.h>","#include <SDL.h>","void ${TM_FILENAME_BASE}_init(component* self){","}","void ${TM_FILENAME_BASE}_init_scene(component* self, scene *s ){","}","void ${TM_FILENAME_BASE}_update(component* self,float dt){","}","void ${TM_FILENAME_BASE}_destructor(component* self){","}","void ${TM_FILENAME_BASE}_on_collision(component* self, GameObject* other){","}","component* new_${TM_FILENAME_BASE}(){","    component* c = (component* )malloc(sizeof(component));","    c->init= ${TM_FILENAME_BASE}_init;","    c->init_scene= ${TM_FILENAME_BASE}_init_scene;","    c->update= ${TM_FILENAME_BASE}_update;","    ${TM_FILENAME_BASE}_data * data = (${TM_FILENAME_BASE}_data*)malloc(sizeof(${TM_FILENAME_BASE}_data));","    /*fill in data*/","    c->data = data;","    c->destructor = ${TM_FILENAME_BASE}_destructor;","    c->onCollision = ${TM_FILENAME_BASE}_on_collision;","    return c;","}"],
		"description":"Component.c"
	},


	"component_h":{
		"prefix":["hcomp"],
		"body":["#ifndef ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H","#define ${TM_FILENAME_BASE/(.*)/${1:/upcase}/}_H","#include \"gameObject.h\"","#include \"component-factory.h\"","typedef struct{","    int a;","    int b;","    char* s;","} ${TM_FILENAME_BASE}_data;","void ${TM_FILENAME_BASE}_init(component* self);","void ${TM_FILENAME_BASE}_init_scene(component* self, scene *s);","void ${TM_FILENAME_BASE}_update(component* self,float dt);","void ${TM_FILENAME_BASE}_destructor(component* self);","void ${TM_FILENAME_BASE}_on_collision(component* self, GameObject* other);","component* new_${TM_FILENAME_BASE}();","#endif"],
		"description":"Component.h"
	}

	
}